<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE definition SYSTEM "hq-aries-definition.dtd">
<definition id="" name="数据是否及时更新的提醒">

<desc>指定某类型数据,系统将根据运行频率定期判断指定数据是否及时更新,未更新时将进行提醒</desc>
<import-js  src="/static/js/aries_plugin_sqlField.js"/>
<import-js  src="/static/js/aries_plugin_sendInfo.js"/>
<import-css src="/static/css/aries_plugin_simplesql.css"/>
<import-css src="/static/css/aries_plugin_sendInfo.css"/>

<showInPage/>

<role>
    <role-html>
       <![CDATA[
          当<a href="#" id="ariesBind_1">哪种数据</a>未及时按<a href="#" id="ariesBind_2">某频率</a>更新时,<a href="#" id="ariesBind_4">执行哪些操作</a>
         
         <script>
            
            /*根据sql取得select字段*/
            var fieldSql = '{"ariesBind_1":"select 1 as 业务量 from dual",
                             "ariesBind_2":"select 1 as 日, 1 as 月, 1 as 季度, 1 as 年 from dual"}';
            
            /*做什么时的提醒方式*/
            var infoPluginShowTabs = [1,2,3];
            
            /*短信人员列表的sql语句*/
            var pluginSmsSql = 'select u.phone as id, u.username as name,u.email as email,u.phone as phone from db_users u';
            
            /*邮件人员列表的sql语句*/
            var pluginEmailSql = 'select u.email as id, u.username as name,u.email as email,u.phone as phone from db_users u';
            
            /*为短信,邮件,医院平台的提醒信息设置为相同内容.在需要时,可以为每种设置不同的提醒内容.*/
            var pluginEmailContent = platFormContent = 
                "智能推送(Aries)系统:\r\n按照频率对您进行提醒:{aries_cron_word}\r\n判断描述:{ariesBind_1}未及时按{ariesBind_2}更新数据\r\n{ariesBind_1}最新更新时间:{最新时间}\r\n提醒信息:";
            var pluginSmsContent = "智能推送(Aries)系统:\r\n{ariesBind_1}未及时按{ariesBind_2}更新数据,\r\n最新更新时间:{最新时间}\r\n提醒信息:";

            setCondition('resultSqlMap', 
                '{"业务量":"select to_date(max(MONTHLY),\'yyyyMM\') as newDate, max(MONTHLY) as originalDate from db_business"
                 }');
         </script>
       ]]>
    </role-html>
    
    <bind id="ariesBind_1" paramKey="sqlField" jsFunc="sqlFieldPlugin "/>
    <bind id="ariesBind_2" paramKey="fieldFormat" jsFunc="sqlFieldPlugin "/>
    <bind id="ariesBind_4" paramKey="d" jsFunc="sendInfoPlugin "/>
        
    <script>
    <![CDATA[
    import org.springframework.web.context.ContextLoader;
    import org.springframework.web.context.WebApplicationContext;
    import com.hanqian.aries.plugin.simplesql.manager.SimpleSqlPluginMgr;
    import com.hanqian.aries.plugin.platform.service.SendSmsService;
    import com.hanqian.aries.plugin.platform.service.SendEmailService;
    import com.hanqian.aries.plugin.platform.service.PlatformService;
    import com.hanqian.aries.common.MsgRegExpUtil;
    import net.sf.json.JSONObject;
    import org.apache.log4j.*;
    import groovy.util.logging.*;
    import com.hanqian.util.DateUtil;
    
    Logger log = Logger.getInstance(getClass());
    log.level = Level.DEBUG;
    
    def logHead = "Aries groovy,规则id:" + ariesParam.get("aries_runtime_id") + ",";
    def resultBoolean = false;
    log.info logHead + "开始执行.";
                                                                                                                                                
    WebApplicationContext context = ContextLoader.getCurrentWebApplicationContext();
    SimpleSqlPluginMgr pluginMgr = context.getBean("pluginMgr", SimpleSqlPluginMgr.class);
    
    /* 根据选择的字段来决定使用哪条sql语句*/
    JSONObject dataJson = JSONObject.fromObject(ariesParam.get("resultSqlMap"));
    def sqlField = ariesParam.get("sqlField");
    ariesParam.put("resultSql", dataJson.get(sqlField));
    
    def resultlist = pluginMgr.findSQLData(ariesParam);

    log.debug logHead + "执行查询的结果集为:" + resultlist;
        
    def isDo = false;
    for(map in resultlist){
        
        def newDate = map.get("newDate") as Date;
        def fieldFormat = ariesParam.get("fieldFormat") as String;
        log.debug logHead + "最新数据日期：" + DateUtil.dateToStrLong(newDate) + ", 提醒频率:" + fieldFormat;
                
        if (newDate == null)
        {
            isDo = true;
            log.debug logHead + "最新数据日期为空,需要发送提醒.";
        }; 
        
        /*频率为日,系统时间减去最新数据日期后的天数大于0*/
        if (("日" == fieldFormat) && (DateUtil.diffDate(DateUtil.getNowDate(), newDate) > 0)) {
            isDo = true;
        } else if (("月" == fieldFormat) && (DateUtil.diffMonth(DateUtil.getNowDate(), newDate) == 1)) {
            isDo = true;
        } else if (("季度" == fieldFormat) && (DateUtil.getSeason(DateUtil.getNowDate()) == DateUtil.getSeason(newDate))) {
            isDo = true;
        } else if (("年" == fieldFormat) && (DateUtil.getYear(DateUtil.getNowDate()) == DateUtil.getYear(newDate))) {
            isDo = true;
        } else {
            isDo = false;
        };
                
        /*这里添加当前值是为了后面发信息时,需要替换字符串的内容时使用当前值*/
        ariesParam.put("最新时间", map.get("originalDate"));
        
        log.info logHead + "最新时间：" + map.get("originalDate") + ", 提醒频率:" + fieldFormat + ",判断后是否执行触发操作:" + isDo;
    };
    
    if(isDo) {
        
        if (ariesParam.get("smsTo")?.next()) {
            log.debug logHead + "准备执行发短信操作";
            SendSmsService sendSmsService = context.getBean("sendSmsService", SendSmsService.class);

            /*将短信文字内的大括号替换内容进行替换*/
            ariesParam.put("smsContent", MsgRegExpUtil.replaceBrace(ariesParam.get("smsContent"), ariesParam));
            sendSmsService.sendSms(ariesParam);
            log.info logHead + "完成执行发短信操作";
        } else {
            log.debug logHead + "短信号码不存在,不需要做发短信操作";
        };
            
        if (ariesParam.get("eTo")?.next()) {
            log.debug logHead + "准备执行发发邮件操作";
            SendEmailService sendEmailService = context.getBean("sendEmailService", SendEmailService.class);

            /*将邮件文字内的大括号替换内容进行替换*/
            ariesParam.put("eContent", MsgRegExpUtil.replaceBrace(ariesParam.get("eContent"), ariesParam));
            sendEmailService.sendEmail(ariesParam);
            log.info logHead + "完成执行发发邮件操作";
        } else {
            log.debug logHead + "邮箱地址不存在,不需要做发邮件操作";
        };
            
        if (ariesParam.get("hospcontent")?.next()) {
            log.debug logHead + "准备执行医院平台报警装置操作";
            PlatformService platformService = context.getBean("platformService", PlatformService.class);

            /*将医院平台文字内的大括号替换内容进行替换*/
            ariesParam.put("hospcontent", MsgRegExpUtil.replaceBrace(ariesParam.get("hospcontent"), ariesParam));
            platformService.addPlatForm(ariesParam);
            log.info logHead + "完成执行医院平台报警装置操作";
        } else {
            log.debug logHead + "医院平台报警装置标志不存在,不需要做医院平台报警操作";
        };              
        resultBoolean = true;
    };  
    
    log.info logHead + "结束执行规则, 返回结果:" + resultBoolean;
    resultBoolean;
    ]]>
    </script>
</role>
</definition>